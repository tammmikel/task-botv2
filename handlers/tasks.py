from aiogram import Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram import F
from aiogram.fsm.context import FSMContext
from database.models import UserManager, CompanyManager, TaskManager
from utils.keyboards import get_main_keyboard, get_back_keyboard, get_task_priority_keyboard, get_task_deadline_keyboard
from utils.states import TaskStates
from datetime import datetime, timedelta

async def create_task_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'"""
    try:
        print("=== –í—ã–∑–≤–∞–Ω create_task_handler ===")
        telegram_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserManager.get_user_by_telegram_id(telegram_id)
        if not user or user['role'] not in ['director', 'manager']:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á.",
                reply_markup=get_main_keyboard(user['role'] if user else 'admin')
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(created_by=user['user_id'])
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        await state.set_state(TaskStates.waiting_for_title)
        
        await message.answer(
            "üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n"
            "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=get_back_keyboard()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ create_task_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_task_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        print("=== –í—ã–∑–≤–∞–Ω process_task_title ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        task_title = message.text.strip()
        if len(task_title) < 3:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):",
                reply_markup=get_back_keyboard()
            )
            return
        
        if len(task_title) > 200:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(task_title=task_title)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await state.set_state(TaskStates.waiting_for_description)
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {task_title}\n\n"
            f"–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=get_back_keyboard()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_task_title: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_task_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        print("=== –í—ã–∑–≤–∞–Ω process_task_description ===")
        
        task_description = message.text.strip()
        if len(task_description) > 1000:
            await message.answer(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.update_data(task_description=task_description)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        companies = CompanyManager.get_all_companies()
        
        if not companies:
            await message.answer(
                "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏'.",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
        company_keyboard = create_company_keyboard(companies)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
        await state.set_state(TaskStates.waiting_for_company)
        
        company_list = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n"
        for i, company in enumerate(companies, 1):
            company_list += f"{i}. {company['name']}\n"
        
        await message.answer(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
            f"–®–∞–≥ 3/5: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏:\n\n"
            f"{company_list}",
            reply_markup=company_keyboard
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_task_description: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_company_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        print("=== –í—ã–∑–≤–∞–Ω process_company_selection ===")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
        companies = CompanyManager.get_all_companies()
        selected_company = None
        
        # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
        for company in companies:
            if company['name'] == message.text:
                selected_company = company
                break
        
        if not selected_company:
            await message.answer(
                "‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=create_company_keyboard(companies)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
        await state.update_data(
            company_id=selected_company['company_id'],
            company_name=selected_company['name']
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        await state.set_state(TaskStates.waiting_for_initiator_name)
        
        await message.answer(
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: {selected_company['name']}\n\n"
            f"–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞—á–∏:",
            reply_markup=get_back_keyboard()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_company_selection: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_initiator_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞"""
    try:
        print("=== –í—ã–∑–≤–∞–Ω process_initiator_name ===")
        
        initiator_name = message.text.strip()
        if len(initiator_name) < 2:
            await message.answer(
                "‚ùå –ò–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
                reply_markup=get_back_keyboard()
            )
            return
        
        if len(initiator_name) > 100:
            await message.answer(
                "‚ùå –ò–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        await state.update_data(initiator_name=initiator_name)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.set_state(TaskStates.waiting_for_initiator_phone)
        
        await message.answer(
            f"‚úÖ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {initiator_name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞:",
            reply_markup=get_back_keyboard()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_initiator_name: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_initiator_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞"""
    try:
        print("=== –í—ã–∑–≤–∞–Ω process_initiator_phone ===")
        
        phone = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) < 10:
            await message.answer(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=get_back_keyboard()
            )
            return
        
        if len(phone) > 20:
            await message.answer(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        await state.update_data(initiator_phone=phone)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã –∏ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)
        assignees = UserManager.get_assignees()
        
        if not assignees:
            await message.answer(
                "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
        assignee_keyboard = create_assignee_keyboard(assignees)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await state.set_state(TaskStates.waiting_for_assignee)
        
        assignee_list = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n"
        for i, assignee in enumerate(assignees, 1):
            name = f"{assignee['first_name'] or ''} {assignee['last_name'] or ''}".strip()
            if not name:
                name = assignee['username'] or f"ID: {assignee['telegram_id']}"
            assignee_list += f"{i}. {name}\n"
        
        await message.answer(
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–®–∞–≥ 5/5: –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:\n\n"
            f"{assignee_list}",
            reply_markup=assignee_keyboard
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_initiator_phone: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def create_company_keyboard(companies):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏"""
    buttons = []
    for company in companies:
        buttons.append([KeyboardButton(text=company['name'])])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False
    )

def create_assignee_keyboard(assignees):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏"""
    buttons = []
    for assignee in assignees:
        name = f"{assignee['first_name'] or ''} {assignee['last_name'] or ''}".strip()
        if not name:
            name = assignee['username'] or f"ID: {assignee['telegram_id']}"
        buttons.append([KeyboardButton(text=name)])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False
    )

def register_task_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(create_task_handler, F.text == "üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dp.message.register(process_task_title, TaskStates.waiting_for_title)
    dp.message.register(process_task_description, TaskStates.waiting_for_description)
    dp.message.register(process_company_selection, TaskStates.waiting_for_company)
    dp.message.register(process_initiator_name, TaskStates.waiting_for_initiator_name)
    dp.message.register(process_initiator_phone, TaskStates.waiting_for_initiator_phone)