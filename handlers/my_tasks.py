from aiogram import Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from database.models import UserManager, TaskManager, FileManager
from utils.keyboards import get_main_keyboard
from utils.file_storage import file_storage
from datetime import datetime

async def my_tasks_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–¥–∞—á–∏'"""
    try:
        print("=== –í—ã–∑–≤–∞–Ω my_tasks_handler ===")
        telegram_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserManager.get_user_by_telegram_id(telegram_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = TaskManager.get_user_tasks(user['user_id'], user['role'])
        
        if not tasks:
            await message.answer(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á",
                reply_markup=get_main_keyboard(user['role'])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
        companies = TaskManager.get_companies_with_tasks(user['user_id'], user['role'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_text = f"üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)}):\n\n"
        
        keyboard = []
        for i, task in enumerate(tasks[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –∑–∞–¥–∞—á
            task_line = f"{i}. {task['status_emoji']} {task['title']}\n"
            task_line += f"   {task['priority_emoji']} {task['company_name']} | ‚è∞ {task['deadline_str']}\n\n"
            tasks_text += task_line
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
            keyboard.append([InlineKeyboardButton(
                text=f"{i}. {task['title'][:35]}...",
                callback_data=f"task_{task['task_id']}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        if companies:
            keyboard.append([InlineKeyboardButton(
                text="üìä –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º",
                callback_data="filter_companies"
            )])
        
        if len(tasks) > 15:
            tasks_text += f"... –∏ –µ—â–µ {len(tasks) - 15} –∑–∞–¥–∞—á(–∏)"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await message.answer(
            tasks_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ my_tasks_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_task_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–¥–∞—á–∏"""
    try:
        data = callback.data
        
        if data.startswith("task_"):
            task_id = data.replace("task_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
            task = TaskManager.get_task_by_id(task_id)
            if not task:
                await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏
            files = FileManager.get_task_files(task_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            detail_text = f"üìã {task['title']}\n\n"
            detail_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
            detail_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {task['company_name']}\n"
            detail_text += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task['priority']}\n"
            detail_text += f"üìä –°—Ç–∞—Ç—É—Å: {task['status']}\n"
            detail_text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {task['deadline_str']}\n"
            detail_text += f"üìû –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {task['initiator_name']}\n"
            
            if files:
                detail_text += f"\nüìé –§–∞–π–ª—ã ({len(files)}):\n"
                for file in files:
                    detail_text += f"‚Ä¢ {file['file_name']}\n"
            
            await callback.message.edit_text(
                detail_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_tasks")]
                ])
            )
            
        elif data == "filter_companies":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
            telegram_id = callback.from_user.id
            user = UserManager.get_user_by_telegram_id(telegram_id)
            companies = TaskManager.get_companies_with_tasks(user['user_id'], user['role'])
            
            keyboard = []
            for company in companies:
                keyboard.append([InlineKeyboardButton(
                    text=f"{company['name']} ({company['task_count']})",
                    callback_data=f"company_{company['company_id']}"
                )])
            
            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_tasks")])
            
            await callback.message.edit_text(
                "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
        elif data == "back_to_tasks":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            await callback.message.delete()
            # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
            fake_message = callback.message
            fake_message.text = "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏"
            fake_message.from_user = callback.from_user
            await my_tasks_handler(fake_message)
            
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_task_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def register_my_tasks_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á"""
    dp.message.register(my_tasks_handler, F.text == "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    dp.callback_query.register(process_task_callback, F.data.startswith("task_"))
    dp.callback_query.register(process_task_callback, F.data == "filter_companies")
    dp.callback_query.register(process_task_callback, F.data == "back_to_tasks")
    dp.callback_query.register(process_task_callback, F.data.startswith("company_"))