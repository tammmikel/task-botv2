from aiogram import Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from database.models import UserManager, TaskManager, FileManager
from utils.keyboards import get_main_keyboard
from utils.file_storage import file_storage
from datetime import datetime

async def my_tasks_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–¥–∞—á–∏'"""
    try:
        print("=== –í—ã–∑–≤–∞–Ω my_tasks_handler ===")
        telegram_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserManager.get_user_by_telegram_id(telegram_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = TaskManager.get_user_tasks(user['user_id'], user['role'])
        
        if not tasks:
            await message.answer(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á",
                reply_markup=get_main_keyboard(user['role'])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = [
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks"),
             InlineKeyboardButton(text="üè¢ –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="filter_companies")]
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
        task_buttons = []
        for task in tasks[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –∑–∞–¥–∞—á
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            urgent_emoji = "üî•" if task.get('is_urgent', False) else ""
            status_names = {
                'new': '–ù–æ–≤–∞—è',
                'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', 
                'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
                'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
            }
            
            status_name = status_names.get(task['status'], task['status'])
            button_text = f"{task['status_emoji']}{urgent_emoji} {status_name} | {task['title'][:25]}... | {task['company_name']} | {task.get('deadline_short', '')}"
            
            task_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"task_{task['task_id']}"
            )])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        keyboard = control_buttons + task_buttons
        
        tasks_text = f"üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)}):"
        if len(tasks) > 15:
            tasks_text += f"\n\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 15 –∏–∑ {len(tasks)} –∑–∞–¥–∞—á"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await message.answer(
            tasks_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ my_tasks_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_task_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–¥–∞—á–∏"""
    try:
        data = callback.data
        
        if data.startswith("task_"):
            task_id = data.replace("task_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
            task = TaskManager.get_task_by_id(task_id)
            if not task:
                await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏
            files = FileManager.get_task_files(task_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            detail_text = f"üìã {task['title']}\n\n"
            detail_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
            detail_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {task['company_name']}\n"
            if task.get('is_urgent', False):
                detail_text += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üî• –°—Ä–æ—á–Ω–∞—è\n"
            detail_text += f"üìä –°—Ç–∞—Ç—É—Å: {task['status']}\n"
            detail_text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {task['deadline_str']}\n"
            detail_text += f"üìû –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {task['initiator_name']}\n"
            
            if files:
                detail_text += f"\nüìé –§–∞–π–ª—ã ({len(files)}):\n"
                for file in files:
                    detail_text += f"‚Ä¢ {file['file_name']}\n"
            
            await callback.message.edit_text(
                detail_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_tasks")]
                ])
            )
            
        elif data == "filter_companies":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
            telegram_id = callback.from_user.id
            user = UserManager.get_user_by_telegram_id(telegram_id)
            companies = TaskManager.get_companies_with_tasks(user['user_id'], user['role'])
            
            keyboard = []
            for company in companies:
                keyboard.append([InlineKeyboardButton(
                    text=f"{company['name']} ({company['task_count']})",
                    callback_data=f"company_{company['company_id']}"
                )])
            
            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_tasks")])
            
            await callback.message.edit_text(
                "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
        elif data == "back_to_tasks":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            telegram_id = callback.from_user.id
            user = UserManager.get_user_by_telegram_id(telegram_id)
            tasks = TaskManager.get_user_tasks(user['user_id'], user['role'])
            
            if not tasks:
                await callback.message.edit_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
            control_buttons = [
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks"),
                 InlineKeyboardButton(text="üè¢ –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="filter_companies")]
            ]
            
            task_buttons = []
            for task in tasks[:15]:
                urgent_emoji = "üî•" if task.get('is_urgent', False) else ""
                status_names = {
                    'new': '–ù–æ–≤–∞—è',
                    'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', 
                    'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
                    'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
                    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
                }
                
                status_name = status_names.get(task['status'], task['status'])
                button_text = f"{task['status_emoji']}{urgent_emoji} {status_name} | {task['title'][:25]}... | {task['company_name']} | {task.get('deadline_short', '')}"
                
                task_buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"task_{task['task_id']}"
                )])
            
            keyboard = control_buttons + task_buttons
            
            tasks_text = f"üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)}):"
            if len(tasks) > 15:
                tasks_text += f"\n\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 15 –∏–∑ {len(tasks)} –∑–∞–¥–∞—á"
            
            await callback.message.edit_text(
                tasks_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )

        elif data == "refresh_tasks":
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            telegram_id = callback.from_user.id
            user = UserManager.get_user_by_telegram_id(telegram_id)
            tasks = TaskManager.get_user_tasks(user['user_id'], user['role'])
            
            if not tasks:
                await callback.message.edit_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
                await callback.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            control_buttons = [
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks"),
                 InlineKeyboardButton(text="üè¢ –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="filter_companies")]
            ]
            
            task_buttons = []
            for task in tasks[:15]:
                urgent_emoji = "üî•" if task.get('is_urgent', False) else ""
                status_names = {
                    'new': '–ù–æ–≤–∞—è',
                    'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', 
                    'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
                    'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
                    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
                }
                
                status_name = status_names.get(task['status'], task['status'])
                button_text = f"{task['status_emoji']}{urgent_emoji} {status_name} | {task['title'][:25]}... | {task['company_name']} | {task.get('deadline_short', '')}"
                
                task_buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"task_{task['task_id']}"
                )])
            
            keyboard = control_buttons + task_buttons
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            from datetime import datetime
            current_time = datetime.now().strftime("%H:%M:%S")
            tasks_text = f"üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)}) - –æ–±–Ω–æ–≤–ª–µ–Ω–æ {current_time}"
            if len(tasks) > 15:
                tasks_text += f"\n\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 15 –∏–∑ {len(tasks)} –∑–∞–¥–∞—á"
            
            await callback.message.edit_text(
                tasks_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_task_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def register_my_tasks_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á"""
    dp.message.register(my_tasks_handler, F.text == "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    dp.callback_query.register(process_task_callback, F.data.startswith("task_"))
    dp.callback_query.register(process_task_callback, F.data == "filter_companies")
    dp.callback_query.register(process_task_callback, F.data == "back_to_tasks")
    dp.callback_query.register(process_task_callback, F.data.startswith("company_"))
    dp.callback_query.register(process_task_callback, F.data == "refresh_tasks")